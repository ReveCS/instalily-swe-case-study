{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\InvisiHands\\\\Cornell Tech\\\\Instalily\\\\partselect-agents\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./ChatWindow.css\";\nimport { getAIMessage } from \"../api/api\"; // Ensure correct path to api.js\nimport { marked } from \"marked\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  const defaultMessage = [{\n    role: \"assistant\",\n    content: \"Hi, I'm PartSelect's customer service bot. I can help you with any questions you may have regarding dishwasher and refrigerator parts. How can I help you today?\"\n  }];\n  const [messages, setMessages] = useState(defaultMessage);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false); // Optional: Add loading state\n\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    // Ensure ref is current before scrolling\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n  useEffect(() => {\n    // Scroll whenever messages change\n    scrollToBottom();\n  }, [messages]);\n  const handleSend = async inputValue => {\n    const trimmedInput = inputValue.trim();\n    if (trimmedInput !== \"\") {\n      const userMessage = {\n        role: \"user\",\n        content: trimmedInput\n      };\n\n      // Add user message immediately and clear input\n      // Pass the current messages state to the API call as history\n      const currentHistory = [...messages, userMessage];\n      setMessages(currentHistory);\n      setInput(\"\");\n      setIsLoading(true); // Start loading\n\n      try {\n        // Call API & get the response data object\n        // Pass the history *before* the user message was added,\n        // as the backend likely expects history + current message separately.\n        const responseData = await getAIMessage(trimmedInput, messages);\n        let assistantMessage;\n\n        // Check if the response is the success structure from the backend\n        if (responseData && responseData.message) {\n          assistantMessage = {\n            role: \"assistant\",\n            content: responseData.message\n          };\n        }\n        // Check if it's the fallback error structure from api.js\n        else if (responseData && responseData.role === 'assistant' && responseData.content) {\n          assistantMessage = responseData; // Use the fallback object directly\n        }\n        // Handle unexpected response format\n        else {\n          console.error(\"Received unexpected response format from API:\", responseData);\n          assistantMessage = {\n            role: \"assistant\",\n            content: \"Sorry, received an unexpected response.\"\n          };\n        }\n\n        // Update messages state with the new assistant message\n        // Use the state *after* user message was added (currentHistory) as the base\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\n      } catch (error) {\n        // This catch is mostly for network errors *before* api.js handles it,\n        // as api.js returns a fallback object for backend errors.\n        console.error(\"Error sending message:\", error);\n        // Add a generic error message to the chat\n        setMessages(prevMessages => [...prevMessages, {\n          role: 'assistant',\n          content: 'Sorry, there was an error connecting to the server.'\n        }]);\n      } finally {\n        setIsLoading(false); // Stop loading\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${message.role}-message-container`,\n        children: message.content && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.role}-message`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: marked.parse(message.content).replace(/<p>|<\\/p>/g, \"\")\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"assistant-message-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message assistant-message thinking\",\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        // Changed to textarea for better multiline handling\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\",\n        onKeyPress: e => {\n          // Send on Enter unless Shift is pressed\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault(); // Prevent newline on send\n            handleSend(input);\n          }\n        },\n        rows: \"3\" // Adjust rows as needed\n        ,\n        disabled: isLoading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: () => handleSend(input),\n        disabled: isLoading || input.trim() === \"\" // Disable button if loading or input empty\n        ,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"jgtQNMlxn2IQY7ClfqeUql7HViM=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getAIMessage","marked","jsxDEV","_jsxDEV","ChatWindow","_s","defaultMessage","role","content","messages","setMessages","input","setInput","isLoading","setIsLoading","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","handleSend","inputValue","trimmedInput","trim","userMessage","currentHistory","responseData","assistantMessage","message","console","error","prevMessages","className","children","map","index","dangerouslySetInnerHTML","__html","parse","replace","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyPress","key","shiftKey","preventDefault","rows","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/InvisiHands/Cornell Tech/Instalily/partselect-agents/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./ChatWindow.css\";\r\nimport { getAIMessage } from \"../api/api\"; // Ensure correct path to api.js\r\nimport { marked } from \"marked\";\r\n\r\nfunction ChatWindow() {\r\n\r\n  const defaultMessage = [{\r\n    role: \"assistant\",\r\n    content: \"Hi, I'm PartSelect's customer service bot. I can help you with any questions you may have regarding dishwasher and refrigerator parts. How can I help you today?\"\r\n  }];\r\n\r\n  const [messages, setMessages] = useState(defaultMessage);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false); // Optional: Add loading state\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    // Ensure ref is current before scrolling\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll whenever messages change\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSend = async (inputValue) => {\r\n    const trimmedInput = inputValue.trim();\r\n    if (trimmedInput !== \"\") {\r\n      const userMessage = { role: \"user\", content: trimmedInput };\r\n\r\n      // Add user message immediately and clear input\r\n      // Pass the current messages state to the API call as history\r\n      const currentHistory = [...messages, userMessage];\r\n      setMessages(currentHistory);\r\n      setInput(\"\");\r\n      setIsLoading(true); // Start loading\r\n\r\n      try {\r\n        // Call API & get the response data object\r\n        // Pass the history *before* the user message was added,\r\n        // as the backend likely expects history + current message separately.\r\n        const responseData = await getAIMessage(trimmedInput, messages);\r\n\r\n        let assistantMessage;\r\n\r\n        // Check if the response is the success structure from the backend\r\n        if (responseData && responseData.message) {\r\n          assistantMessage = { role: \"assistant\", content: responseData.message };\r\n        }\r\n        // Check if it's the fallback error structure from api.js\r\n        else if (responseData && responseData.role === 'assistant' && responseData.content) {\r\n           assistantMessage = responseData; // Use the fallback object directly\r\n        }\r\n        // Handle unexpected response format\r\n        else {\r\n           console.error(\"Received unexpected response format from API:\", responseData);\r\n           assistantMessage = { role: \"assistant\", content: \"Sorry, received an unexpected response.\" };\r\n        }\r\n\r\n        // Update messages state with the new assistant message\r\n        // Use the state *after* user message was added (currentHistory) as the base\r\n        setMessages(prevMessages => [...prevMessages, assistantMessage]);\r\n\r\n      } catch (error) {\r\n        // This catch is mostly for network errors *before* api.js handles it,\r\n        // as api.js returns a fallback object for backend errors.\r\n        console.error(\"Error sending message:\", error);\r\n        // Add a generic error message to the chat\r\n        setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: 'Sorry, there was an error connecting to the server.' }]);\r\n      } finally {\r\n        setIsLoading(false); // Stop loading\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`${message.role}-message-container`}>\r\n            {message.content && (\r\n              <div className={`message ${message.role}-message`}>\r\n                {/* Use marked.parse instead of dangerouslySetInnerHTML for potentially safer rendering if needed, but this is common */}\r\n                <div dangerouslySetInnerHTML={{ __html: marked.parse(message.content).replace(/<p>|<\\/p>/g, \"\") }}></div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n            <div className=\"assistant-message-container\">\r\n                <div className=\"message assistant-message thinking\">...</div>\r\n            </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <textarea // Changed to textarea for better multiline handling\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n          onKeyPress={(e) => {\r\n            // Send on Enter unless Shift is pressed\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n              e.preventDefault(); // Prevent newline on send\r\n              handleSend(input);\r\n            }\r\n          }}\r\n          rows=\"3\" // Adjust rows as needed\r\n          disabled={isLoading} // Disable input while loading\r\n        />\r\n        <button\r\n          className=\"send-button\"\r\n          onClick={() => handleSend(input)}\r\n          disabled={isLoading || input.trim() === \"\"} // Disable button if loading or input empty\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}